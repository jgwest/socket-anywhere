/*
	Copyright 2012, 2013 Jonathan West

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. 
*/

package com.socketanywhere.nonbreaking;

import java.io.IOException;

import com.socketanywhere.net.IServerSocketTL;
import com.socketanywhere.net.ISocketFactory;
import com.socketanywhere.net.ISocketTL;
import com.socketanywhere.net.TLAddress;
import com.socketanywhere.socketfactory.TCPSocketFactory;


/** Wraps an inner factory, and has the ability to detect when a socket generated by that factory dies.
 * If it dies, this factory will attempt to re-establish it ASAP. The fact that the underlying socket died 
 * will not be made visible to the caller of the NBSocket; it will be as if it never happened. 
 * 
 * In this way, potentially unreliable underlying socket layers can be made reliable using NBSocket.
 * */
public class NBSocketFactory implements ISocketFactory {

	// We keep these separate, in order to avoid of the problem of our 
	// ConnectionBrain maps conflicting with each other in the case where the same process creates
	// a server socket, and then connects to that server socket from that same process.
	//
	// It's also helpful when debugging to think of connector and connectee as "separate" entities.
	ConnectionBrain _socketBrain;
	ConnectionBrain _serverSocketBrain;
	
	ISocketFactory _socketFactory;
		
	private NBOptions _options = new NBOptions();
	
	/** Default is just TCP factory */
	public NBSocketFactory() {
		_socketFactory = new TCPSocketFactory();
		_socketBrain = new ConnectionBrain(_socketFactory, _options);
		_serverSocketBrain = new ConnectionBrain(_socketFactory, _options);
	}
	
	
	public NBSocketFactory(ISocketFactory factory) {
		_socketFactory = factory;
		_socketBrain = new ConnectionBrain(_socketFactory, _options);
		_serverSocketBrain = new ConnectionBrain(_socketFactory, _options);
	}
	
	
	
	@Override
	public IServerSocketTL instantiateServerSocket() throws IOException {
		NBServerSocket sock;
		sock = new NBServerSocket(_serverSocketBrain, _socketFactory, _options);
		
		return sock;
	}

	@Override
	public IServerSocketTL instantiateServerSocket(TLAddress address) throws IOException {
		return new NBServerSocket(address, _serverSocketBrain, _socketFactory, _options);
	}

	@Override
	public ISocketTL instantiateSocket() throws IOException {
		NBSocket sock = new NBSocket(_socketBrain, _socketFactory, _options);		
		return sock;
	}

	@Override
	public ISocketTL instantiateSocket(TLAddress address) throws IOException {
		NBSocket sock = new NBSocket(address, _socketBrain, _socketFactory, _options);

		return sock;
	}

	
	public NBOptions getOptions() {
		return _options;
	}

}
