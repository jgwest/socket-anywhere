/*
	Copyright 2012 Jonathan West

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. 
*/

package com.socketanywhere.obfuscator;

import java.util.Random;

/** Implements the encrypt(...) and decrypt(...) methods; encryption and decryption
 * is just adding/subtracting random bytes generated by the Java Random class, with a specific seed. */
public class PseudorandomDataTransformer implements IDataTransformer {

	CustomRandom _encryptRandom;
	CustomRandom _decryptRandom;
	
	int _bytesSent = 0 ;
	int _bytesReceived = 0;
	
	IPseudorandomSeedGen _seedGen;
	
	
	Object _lock = new Object();
	
	// Debug --------------------------
	static int _sdlCount = 0;
	static int _thisSdlInstance = 0; 
	// --------------------------------

	public PseudorandomDataTransformer(IPseudorandomSeedGen seedGen) {
		_seedGen = seedGen;
		_encryptRandom = new CustomRandom(seedGen.generatePseudorandomSeed());
		_decryptRandom = new CustomRandom(seedGen.generatePseudorandomSeed());
		
	}
	
	public PseudorandomDataTransformer() {
		_encryptRandom = new CustomRandom(12);
		_decryptRandom = new CustomRandom(12);
		
		synchronized(_lock) {
			_thisSdlInstance = _sdlCount++;
		}
	}
	
	@Override
	public void encrypt(byte[] data, int off, int len) {
		
		byte[] randomR;
		
		synchronized(_lock) {
			randomR = new byte[len];		
			_encryptRandom.nextBytes(randomR);
		}
		
		for(int x = off; x < off+len; x++) {
			data[x] += randomR[x-off];
		}

		_bytesSent += len;
	}

	@Override
	public void decrypt(byte[] data, int off, int len) {		
		byte[] randomR;
		
		synchronized(_lock) {
			randomR = new byte[len];	
			_decryptRandom.nextBytes(randomR);
		}

		for(int x = off; x < off+len; x++) {
			data[x] -= randomR[x-off];
		}

		_bytesReceived+= len;
		
	}
	
	@Override
	public IDataTransformer instantiateDataTransformer() {
		if(_seedGen != null) {
			return new PseudorandomDataTransformer(_seedGen);
		} else {
			return new PseudorandomDataTransformer();			
		}
		
	}

}

class CustomRandom {
	private static int nextInstance = 0;
	
	private static final Object lock = new Object();
	
	int _instance = -1;
		
	Random _rand;
	
	public CustomRandom(long num) {
		_rand = new Random(num);
		synchronized(lock) {
			_instance = nextInstance++;
		}
	}
	
	public void nextBytes(byte[] b) {
		
		for(int x = 0; x < b.length; x++) {
			byte[] nextByte = new byte[1];
			_rand.nextBytes(nextByte);
			
			b[x] += (nextByte[0] + 12);
		}
		
	}
	
	
}

