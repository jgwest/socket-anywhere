/*
	Copyright 2012 Jonathan West

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. 
*/

package com.socketanywhere.passthrough;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.socketanywhere.passthrough.TestLogEntry.EntryType;

/** The purpose of the passthrough socket factory is for debugging purposes; the passthrough factory can be
 * placed at exit point of a socket factory stack, for both the sender/receiver, in order to ensure
 * that data that is transmitted by one is received by the other, and vice versa. 
 * 
 *  This class will parse the log file that is generated by the passthrough socket factory, and 
 *  determine if data integrity has been preserved or if any data is missing. */
public class PTUtil {

	public static void main(String[] args) {
		
		final String DIRECTORY_TO_SEARCH = new String("c:\\temp\\pt");
		
		File dir = new File(DIRECTORY_TO_SEARCH);
		
		List<File> fileList = new ArrayList<File>();
		List<List<TestLogEntry>>  tlEntries = new ArrayList<List<TestLogEntry>>();
		
		try {
			
			for(File f : dir.listFiles()) {
				if(f.isDirectory()) continue;
				
				List<TestLogEntry> l = convertFile(f);
				tlEntries.add(l);
				fileList.add(f);
			}
		
		} catch(Exception e) {
			e.printStackTrace();
		}

		int nextMatchNum = 1;
		for(List<TestLogEntry> one : tlEntries) {
			for(List<TestLogEntry> two : tlEntries) {
				if(one == two) continue;
				if(compareTLEntries(one, two)) {
					File fone = fileList.get(tlEntries.indexOf(one));
					File ftwo = fileList.get(tlEntries.indexOf(two));
					
					// one of the files must contain entry, the other must contain exit
					if(!(fone.getName()+ftwo.getName()).contains("exit-") ||
							!(fone.getName()+ftwo.getName()).contains("entry-")) {
						continue;
					}
					
					
					System.out.println("Match found - "+fone.getName() + " "+ftwo.getName());
					PTUtil.containsMatchingDisconnect(one, two);
					
					PTUtil.detailedCompareTLEntries(one, two);
					System.out.println();
					
					String matchPrefix = "match"+(nextMatchNum++)+"-";
					
					fone.renameTo(new File(fone.getParent()+File.separator+matchPrefix+fone.getName()));
					
					ftwo.renameTo(new File(ftwo.getParent()+File.separator+matchPrefix+ftwo.getName()));
					
					

					
					
					fone.delete();
					ftwo.delete();
				}
				
			}
		}
		
	}
	
	
	public static boolean containsMatchingDisconnect(List<TestLogEntry> one, List<TestLogEntry> two) {
		
		boolean matchFoundInFirst = false;
		for(TestLogEntry e : one) {
			if(e.getType() == EntryType.LOCAL_INIT_DC || e.getType() == EntryType.REMOTE_INIT_DC) {
				matchFoundInFirst = true;
			}
		}
		
		boolean matchFoundInSecond = false;
		for(TestLogEntry e : two) {
			if(e.getType() == EntryType.LOCAL_INIT_DC || e.getType() == EntryType.REMOTE_INIT_DC) {
				matchFoundInSecond = true;
			}
		}
		
		if(matchFoundInFirst == matchFoundInSecond)  {
			return true;
		}
		
		System.out.println("* Mismatching disconnect.");
		
		return false;
		
	}
	
	@SuppressWarnings("unused")
	public static boolean detailedCompareTLEntries(List<TestLogEntry> one, List<TestLogEntry> two) {
		
		// compare the receive of one with the sent of two
		// compate the sent of one with the received of two
		
		List<PTData> s1 = getAllData(one, TestLogEntry.EntryType.SENT);
		List<PTData> r2 = getAllData(two, TestLogEntry.EntryType.RECEIVED);
		int total1 = Math.max(s1.size(), r2.size());
		int count = Math.min(s1.size(), r2.size());
		int match = 0;
		for(int x = 0; x < count; x++) {
			if(comparePTData(s1.get(x), r2.get(x))) {
				match++;
			}
		}
		
		
		List<PTData> r1 = getAllData(one, TestLogEntry.EntryType.RECEIVED);
		List<PTData> s2 = getAllData(two, TestLogEntry.EntryType.SENT);
		int total2 = Math.max(r1.size(), s2.size());
		int count2 = Math.min(r1.size(), s2.size());
		int match2 = 0;
		for(int x = 0; x < count2; x++) {
			if(comparePTData(r1.get(x), s2.get(x))) {
				match2++;
			}
		}

		if(count == 0 || count2 == 0) return false;

		if(match == 0 || match2 == 0) return false;
		
		float totalMatch1 = ((float)match/(float)total1);
		float totalMatch2 = ((float)match2/(float)total2);
				

		if(Math.abs(total2 -match2) >= 1 || Math.abs(total1 -match) >= 1) {
			System.out.println("* Mismatch detected.");
		}
		
		
//		System.out.println(count + " "+count2);
		return match >= Math.min(count, 20) && match2 >= Math.min(count2, 20);
		
//		return false;
		
	}

	
	public static boolean compareTLEntries(List<TestLogEntry> one, List<TestLogEntry> two) {
		
		// compare the receive of one with the sent of two
		// compate the sent of one with the received of two
		
		List<PTData> s1 = getAllData(one, TestLogEntry.EntryType.SENT);
		List<PTData> r2 = getAllData(two, TestLogEntry.EntryType.RECEIVED);
		int total1 = Math.max(s1.size(), r2.size());
		int count = Math.min(s1.size(), r2.size());
		int match = 0;
		for(int x = 0; x < count; x++) {
			if(comparePTData(s1.get(x), r2.get(x))) {
				match++;
			}
		}
		
		
		List<PTData> r1 = getAllData(one, TestLogEntry.EntryType.RECEIVED);
		List<PTData> s2 = getAllData(two, TestLogEntry.EntryType.SENT);
		int total2 = Math.max(r1.size(), s2.size());
		int count2 = Math.min(r1.size(), s2.size());
		int match2 = 0;
		for(int x = 0; x < count2; x++) {
			if(comparePTData(r1.get(x), s2.get(x))) {
				match2++;
			}
		}

		if(count == 0 || count2 == 0) return false;

		if(match == 0 || match2 == 0) return false;
		
		float totalMatch1 = ((float)match/(float)total1);
		float totalMatch2 = ((float)match2/(float)total2);
		
//		System.out.println("%:"+totalMatch1+ " "+totalMatch2);
		
		if(totalMatch1 < 0.75 || totalMatch2 < 0.75) return false;
		
//		if(count - count2 > 20) {
//			return false;
//		}
//		
//		if(count2 - count > 20) {
//			return false;
//		}
		
//		System.out.println(count + " "+count2);
		return match >= Math.min(count, 20) && match2 >= Math.min(count2, 20);
		
//		return false;
		
	}
	
	private static boolean comparePTData(PTData one, PTData two) {
		
		if(one.getChecksumAll() == two.getChecksumAll() && one.getBytesSentRecv() == two.getBytesSentRecv() &&
				one.getChecksumEven() == two.getChecksumEven() && one.getChecksumOdd() == two.getChecksumOdd())  {
			return true;
		}
		
		return false;
	}

	
	public static List<PTData> getAllData(List<TestLogEntry> in, EntryType type)  {
		List<PTData> result = new ArrayList<PTData>();
		
		for(TestLogEntry l : in) {
			if(l.getType() == type) {
				result.add((PTData)l);
			}
		}
		
		return result;
	}

	
	
	public static PTData getFirstData(List<TestLogEntry> in, EntryType type)  {
		for(TestLogEntry l : in) {
			if(l.getType() == type) {
				return (PTData)l;
			}
		}
		
		return null;
	}
	
	public static List<TestLogEntry> convertFile(File f) throws IOException {
		FileReader fr = new FileReader(f);
		BufferedReader br = new BufferedReader(fr);
		String str;
		
		List<TestLogEntry> result = new ArrayList<TestLogEntry>();
		
		while (  ( str = br.readLine()) != null) {
			
			if(str.contains("PTDataSent")) {
				PTDataSent e = new PTDataSent();
				e.deserialize(str);
				result.add(e);
			}
			
			if(str.contains("PTDataReceived")) {
				PTDataReceived e = new PTDataReceived();
				e.deserialize(str);
				result.add(e);
			}
			
			if(str.contains("PTError")) {
				PTError e = new PTError();
				e.deserialize(str);
				result.add(e);
			}
			
			if(str.contains("PTLocalInitiatedConnection")) {
				PTLocalInitiatedConnection e = new PTLocalInitiatedConnection();
				e.deserialize(str);
				result.add(e);
			}
			
			if(str.contains("PTRemoteInitiatedConnection")) {
				PTRemoteInitiatedConnection e = new PTRemoteInitiatedConnection();
				e.deserialize(str);
				result.add(e);
			}
			
			if(str.contains("PTLocalInitiatedDisconnect")) {
				PTLocalInitiatedDisconnect e = new PTLocalInitiatedDisconnect();
				e.deserialize(str);
				result.add(e);
			}
			
			if(str.contains("PTRemoteInitiatedDisconnect")) {
				PTRemoteInitiatedDisconnect e = new PTRemoteInitiatedDisconnect();
				e.deserialize(str);
				result.add(e);
			}
			
			if(str.contains("PTDebug")) {
				PTDebug e = new PTDebug();
				e.deserialize(str);
				result.add(e);
			}

			
		}
		
		br.close();
		fr.close();
		
		return result;
	}
}
